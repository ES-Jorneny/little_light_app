import 'dart:io';
import 'dart:typed_data';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';
import 'package:fyp_project/widgets/appbar.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'package:path_provider/path_provider.dart';
import 'package:open_file/open_file.dart';
import 'package:share_plus/share_plus.dart';
import 'package:image_picker/image_picker.dart';

class AdminReportScreen extends StatefulWidget {
  final String donorId;
  final String donorName;

  AdminReportScreen({required this.donorId, required this.donorName});

  @override
  _AdminReportScreenState createState() => _AdminReportScreenState();
}

class _AdminReportScreenState extends State<AdminReportScreen> {
  Map<String, int> categoryData = {};
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    loadDonorReport();
  }

  Future<void> loadDonorReport() async {
    final snapshot = await FirebaseFirestore.instance
        .collection('donations')
        .where('donorId', isEqualTo: widget.donorId)
        .get();

    Map<String, int> data = {
      'Food': 0,
      'Cloth': 0,
      'Book': 0,
      'Education': 0,
      'Health': 0,
      'Wedding': 0,
    };

    for (var doc in snapshot.docs) {
      final category = doc['category'];
      if (data.containsKey(category)) {
        data[category] = data[category]! + 1;
      }
    }

    setState(() {
      categoryData = data;
      isLoading = false;
    });
  }

  Future<void> _generatePdfReport() async {
    final pdf = pw.Document();

    final total = categoryData.values.reduce((a, b) => a + b);

    pdf.addPage(
      pw.Page(
        margin: pw.EdgeInsets.all(24),
        build: (context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text(
              'Donation Report',
              style: pw.TextStyle(
                fontSize: 24,
                fontWeight: pw.FontWeight.bold,
                color: PdfColors.blue800,
              ),
            ),
            pw.SizedBox(height: 8),
            pw.Text(
              'Donor: ${widget.donorName}',
              style: pw.TextStyle(fontSize: 16),
            ),
            pw.SizedBox(height: 24),
            pw.Table.fromTextArray(
              headers: ['Category', 'Donations'],
              data: categoryData.entries.map((e) => [e.key, e.value.toString()]).toList(),
              headerStyle: pw.TextStyle(
                fontWeight: pw.FontWeight.bold,
                color: PdfColors.white,
              ),
              headerDecoration: pw.BoxDecoration(color: PdfColors.blue700),
              cellAlignment: pw.Alignment.centerLeft,
              cellStyle: pw.TextStyle(fontSize: 12),
            ),
            pw.SizedBox(height: 20),
            pw.Text(
              'Total Donations: $total',
              style: pw.TextStyle(fontSize: 14, fontWeight: pw.FontWeight.bold),
            ),
            pw.SizedBox(height: 40),
            pw.Text(
              'Generated by Little Light Admin Panel',
              style: pw.TextStyle(fontSize: 10, color: PdfColors.grey),
            ),
          ],
        ),
      ),
    );

    final outputDirectory = await getApplicationDocumentsDirectory();
    final file = File('${outputDirectory.path}/donor_report_${widget.donorId}.pdf');
    await file.writeAsBytes(await pdf.save());

    OpenFile.open(file.path);
    _sharePdfReport(XFile(file.path));
  }

  void _sharePdfReport(XFile xfile) {
    Share.shareXFiles([xfile], text: 'Here is my donation report!');
  }

  @override
  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return Scaffold(
        backgroundColor: Colors.white,
        body: Center(child: CircularProgressIndicator(color: Color(0xFF9CCCF2))),
      );
    }

    int total = categoryData.values.fold(0, (a, b) => a + b);

    return Scaffold(
      backgroundColor: Color(0xFFF2F4F8),
      appBar: customAppBarForScreens('${widget.donorName} Report'),
      body: SingleChildScrollView(
        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 24),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Donation Summary',
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.w600,
                color: Colors.blue.shade400,
                fontFamily: "Poppins"
              ),
            ),
            SizedBox(height: 10),
            Text(
              'An overview of all donations made by ${widget.donorName}.',
              style: TextStyle(
                fontSize: 13,
                color: Colors.grey.shade700,
                fontFamily: "Poppins"
              ),
            ),
            SizedBox(height: 30),

            // Pie Chart
            Container(
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
                boxShadow: [BoxShadow(color: Colors.black12, blurRadius: 6)],
              ),
              child: AspectRatio(
                aspectRatio: 1.3,
                child: PieChart(
                  PieChartData(
                    sectionsSpace: 2,
                    centerSpaceRadius: 40,
                    sections: categoryData.entries.map((entry) {
                      double percent = total == 0 ? 0 : (entry.value / total) * 100;
                      return PieChartSectionData(
                        color: _getColor(entry.key),
                        value: percent,
                        title: '${percent.toStringAsFixed(1)}%',
                        titleStyle: TextStyle(fontSize: 12, color: Colors.white),
                        radius: 60,
                      );
                    }).toList(),
                  ),
                ),
              ),
            ),

            SizedBox(height: 30),

            // Bar Chart
            Text(
              'Donations by Category',
              style:  TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.w500,
                  color: Colors.blue.shade400,
                  fontFamily: "Poppins"
              ),
            ),
            SizedBox(height: 12),
            Container(
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
                boxShadow: [BoxShadow(color: Colors.black12, blurRadius: 6)],
              ),
              child: AspectRatio(
                aspectRatio: 1.5,
                child: BarChart(
                  BarChartData(
                    alignment: BarChartAlignment.spaceAround,
                    maxY: (categoryData.values.reduce((a, b) => a > b ? a : b)).toDouble() + 2,
                    barTouchData: BarTouchData(enabled: true),
                    barGroups: categoryData.entries.map((entry) {
                      return BarChartGroupData(
                        x: categoryData.keys.toList().indexOf(entry.key),
                        barRods: [
                          BarChartRodData(
                            toY: entry.value.toDouble(),
                            color: _getColor(entry.key),
                            width: 18,
                            borderRadius: BorderRadius.circular(6),
                            backDrawRodData: BackgroundBarChartRodData(
                              show: true,
                              toY: (categoryData.values.reduce((a, b) => a > b ? a : b)).toDouble() + 2,
                              color: Colors.grey.shade200,
                            ),
                          ),
                        ],
                      );
                    }).toList(),
                    titlesData: FlTitlesData(
                      leftTitles: AxisTitles(
                        sideTitles: SideTitles(
                          showTitles: true,
                          reservedSize: 28,
                          interval: 1,
                          getTitlesWidget: (value, meta) => Text(
                            '${value.toInt()}',
                            style: TextStyle(fontSize: 10),
                          ),
                        ),
                      ),
                      bottomTitles: AxisTitles(
                        sideTitles: SideTitles(
                          showTitles: true,
                          getTitlesWidget: (value, meta) {
                            return Padding(
                              padding: const EdgeInsets.only(top: 4),
                              child: Text(
                                categoryData.keys.toList()[value.toInt()],
                                style: TextStyle(fontSize: 10),
                              ),
                            );
                          },
                        ),
                      ),
                      topTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                      rightTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                    ),
                    gridData: FlGridData(show: true, drawVerticalLine: false),
                    borderData: FlBorderData(show: false),
                  ),
                ),
              ),
            ),

            SizedBox(height: 30),

            // Total count
            Center(
              child: Text(
                'Total Donations: $total',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.black87),
              ),
            ),

            SizedBox(height: 25),

            // PDF Button
            Center(
              child: SizedBox(
                width: 200,
                child: ElevatedButton.icon(
                  icon: Icon(Icons.picture_as_pdf_rounded, color: Colors.white),
                  label: Text("Generate PDF", style: TextStyle(color: Colors.white,fontFamily: "Poppins",fontSize: 14,fontWeight: FontWeight.w500)),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Color(0xFF9CCCF2),
                    elevation: 2,
                    padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                    textStyle: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(4),
                    ),
                  ),
                  onPressed: _generatePdfReport,
                ),
              ),
            ),

            SizedBox(height: 40),
          ],
        ),
      ),
    );
  }


// Updated color scheme and UI design for a more professional look

  Color _getColor(String category) {
    switch (category) {
      case 'Food':
        return Color(0xFFF4A261); // Warm Orange
      case 'Cloth':
        return Color(0xFF2A9D8F); // Teal
      case 'Book':
        return Color(0xFFE9C46A); // Soft Yellow
      case 'Education':
        return Color(0xFF6D597A); // Dusty Purple
      case 'Health':
        return Color(0xFFE76F51); // Coral Red
      case 'Wedding':
        return Color(0xFF457B9D); // Blue-Grey
      default:
        return Colors.grey.shade500;
    }
  }

}
